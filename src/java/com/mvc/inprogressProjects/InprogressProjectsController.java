package com.mvc.inprogressProjects;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mvc.inprogressProjects.*;

/* 
 * Generated by Natileo - Velociraptor
 * on Thu Nov 04 21:12:37 CET 2010
 * hemca.com
 * by Strzelewicz Alexandre
 */

@Controller
@RequestMapping(value="/inprogressProjects")
public class InprogressProjectsController {
	@Autowired
	private InprogressProjectsService inprogressProjectsService;
	
	@RequestMapping(value="/read.action")
	public @ResponseBody Map<String,? extends Object> getInprogressProjects() throws Exception {
		try {
			List<InprogressProjects> inprogressProjects = inprogressProjectsService.getInprogressProjectsList();
			return getMap(inprogressProjects);
		}catch (Exception e){
			return getModelMapError("Failure");
		}
	}
	
	@RequestMapping(value="/read.action", params={"start", "limit"})
	public @ResponseBody Map<String,? extends Object> getInprogressProjects(@RequestParam int start,
																	 @RequestParam int limit) 
																	 throws Exception {
		try {
			List<InprogressProjects> inprogressProjects = inprogressProjectsService.getInprogressProjectsList(start, limit);
			return getMap(inprogressProjects);
		}catch (Exception e){
			return getModelMapError("Failure");
		}
	}
	
	@RequestMapping(value="/read.action", params={"start", 
												  "limit", 
												  "filter[0][data][type]",
												  "filter[0][data][value]", 
												  "filter[0][field]"})
	public @ResponseBody Map<String,? extends Object> getProj(@RequestParam int start,
															  @RequestParam int limit,
															  @RequestParam("filter[0][data][type]") String type,
															  @RequestParam("filter[0][data][value]") String value,
															  @RequestParam("filter[0][field]") String field) 
															  throws Exception {
		try {
			List<InprogressProjects> inprogressProjects = inprogressProjectsService.getInprogressProjectsList(start, limit, type, value, field);
			return getMap(inprogressProjects);
		}catch (Exception e){
			return getModelMapError("Failure");
		}
	}
	@RequestMapping(value="/create.action")
	public @ResponseBody Map<String,? extends Object> createInprogressProjects(@RequestParam Object data) throws Exception{
		try{
			InprogressProjects inprogressProjects = inprogressProjectsService.createNewInprogressProjects(data);
			return getMapSolo(inprogressProjects);
		} catch (Exception e) {
			return getModelMapError("Error trying to update InprogressProjects.");
		}
	}
	
	@RequestMapping(value="/update.action")
	public @ResponseBody Map<String,? extends Object> updateInprogressProjects(@RequestParam Object data) throws Exception{
		try{
			inprogressProjectsService.createNewInprogressProjects(data);
			Map<String,Object> modelMap = new HashMap<String,Object>(3);
			modelMap.put("success", true);
			return modelMap;
		} catch (Exception e) {
			return getModelMapError("Error trying to update InprogressProjects.");
		}
	}
	
	@RequestMapping(value="/delete.action")
	public @ResponseBody Map<String,? extends Object> delete(@RequestParam Object data) throws Exception {
		try{
			inprogressProjectsService.deleteInprogressProjects(data);
			Map<String,Object> modelMap = new HashMap<String,Object>(3);
			modelMap.put("success", true);
			return modelMap;
		} catch (Exception e) {
			return getModelMapError("Error trying to delete InprogressProjects.");
		}
	}
	
	private Map<String,Object> getMapSolo(InprogressProjects object){
		Map<String,Object> modelMap = new HashMap<String,Object>(4);
		modelMap.put("data", object);
		modelMap.put("success", true);
		return modelMap;
	}
	
	private Map<String,Object> getMap(List<InprogressProjects> object){
		Map<String,Object> modelMap = new HashMap<String,Object>(4);
		modelMap.put("total", object.size());
		modelMap.put("data", object);
		modelMap.put("success", true);
		return modelMap;
	}
	
	private Map<String,Object> getModelMapError(String msg){
		Map<String,Object> modelMap = new HashMap<String,Object>(2);
		modelMap.put("message", msg);
		modelMap.put("success", false);
		return modelMap;
	} 

}
